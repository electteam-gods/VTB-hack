import asyncio
import os
import whisper

from concurrent.futures import ProcessPoolExecutor
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, Update, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

REPLY_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=['–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏'],
    resize_keyboard=True,
    one_time_keyboard=False
)

USER_STATE = {}
USER_QUESTION = {}
USER_JOB = {}

executor = ProcessPoolExecutor()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–æ–º–ø–∞–Ω–∏–µ–π \"–°—ã–Ω—ã –ú–∏—Ä–∞–∂–∞\".\n\n"
        "–û–Ω –º–æ–∂–µ—Ç:\n"
        "üîπ –í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –∏–∑ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "üîπ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ –∑–∞–Ω—è—Ç–∏–π\n"
        "üîπ –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–Ω–∞–Ω–∏–π.",
        reply_markup=REPLY_KEYBOARD
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    await query.answer()

    cur_data = query.data
    user_id = query.from_user.id

    if USER_STATE[user_id] == 'job_selection':
        await query.edit_message_text(text='–ù–∞ –∫–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ?', reply_markup=None)
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text='–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ pdf —Ñ–∞–π–ª —Å–≤–æ–µ–≥–æ —Ä–µ–∑—é–º–µ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –æ—Ü–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.',
            reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π']], resize_keyboard=True,
                                             one_time_keyboard=True)
        )
        USER_STATE[user_id] = 'awaiting_resume'


def generate_question(context, user_question, user_job):
    return '–¢—ã –∫—Ç–æ?'


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏' or text == '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π':
        USER_STATE[user_id] = 'job_selection'

        job_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton('–í–∞–∫–∞–Ω—Å–∏—è1', callback_data='job_1')],
            [InlineKeyboardButton('–í–∞–∫–∞–Ω—Å–∏—è2', callback_data='job_2')],
            [InlineKeyboardButton('–í–∞–∫–∞–Ω—Å–∏—è3', callback_data='job_3')]
        ])
        await update.message.reply_text('–ù–∞ –∫–∞–∫—É—é –≤–∞–∫–∞–Ω—Å–∏—é —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ?',
                                        reply_markup=job_keyboard)
    elif text == '–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' and USER_STATE.get(user_id) == 'awaiting_interview_starting':
        USER_STATE[user_id] = 'interview_in_process'

        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(executor, generate_question, '', USER_QUESTION.get(user_id),
                                            USER_JOB.get(user_id))
        await update.message.reply_text(result)
    else:
        if USER_STATE.get(user_id) == 'interview_in_process':
            await update.message.reply_text('–ù–∞ –≤–æ–ø—Ä–æ—Å—ã —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.')
        else:
            await start(update, context)


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    user_id = update.message.from_user.id
    if USER_STATE.get(user_id) == 'interview_in_process':
        file = await voice.get_file()
        file_path = f'downloads/{voice.file_unique_id}.ogg'
        await file.download_to_drive(file_path)
        


def is_correct_resume(file_path):
    return True

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    document = update.message.document
    user_state = USER_STATE.get(user_id)

    if user_state == 'awaiting_resume':
        if document.mime_type == 'application/pdf':
            file = await context.bot.get_file(document.file_id)
            file_path = f"./downloads/{document.file_name}"
            await file.download_to_drive(file_path)
            # –¥–∞–ª–µ–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ pdf, –∑–∞—Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è

            await update.message.reply_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—é–º–µ...")

            loop = asyncio.get_running_loop()
            result = await loop.run_in_executor(executor, is_correct_resume, file_path)

            if result:
                USER_STATE[user_id] = 'awaiting_interview_starting'

                await update.message.reply_text('–í—ã –¥–æ–ø—É—â–µ–Ω—ã –¥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. '
                                                '–û–Ω–æ –±—É–¥–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è '
                                                '–Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–µ–º–µ, '
                                                '–∞ —Ç–∞–∫–∂–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–æ—Ñ—Ç —Å–∫–∏–ª–ª–∞–º. '
                                                '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. '
                                                '–ü–æ –∏—Ç–æ–≥–∞–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç—á—ë—Ç.',
                                                reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π'],
                                                                                  ['–ù–∞—á–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ']],
                                                                                 resize_keyboard=True,
                                                                                 one_time_keyboard=True
                                                                                 )
                                                )
            else:
                await update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –¥–æ–ø—É—â–µ–Ω—ã –¥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, '
                                                '—Ç–∞–∫ –∫–∞–∫ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏.',
                                                reply_markup=ReplyKeyboardMarkup([['–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤–∞–∫–∞–Ω—Å–∏–π']],
                                                                                 resize_keyboard=True,
                                                                                 one_time_keyboard=True
                                                                                 )
                                                )
        else:
            await update.message.reply_text('–§–∞–π–ª —Ä–µ–∑—é–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ .PDF')
    else:
        await start(update, context)

if __name__ == '__main__':
    if not os.path.exists('./downloads'):
        os.mkdir('./downloads')
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(CallbackQueryHandler(button_handler))

    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    app.run_polling()
